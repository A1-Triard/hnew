#!/bin/sh

#
# Copyright 2017 Warlock <internalmike@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

author_name="Warlock"
author_email="internalmike@gmail.com"
author_git="A1-Triard"

help() {
    echo "Usage: hnew [OPTION]... LIB_NAME APP_NAME"
    echo "Create new haskell project."
    echo ""
    echo "  -h          display this help and exit"
    echo "  -d DESCR    description"
    echo "  -g URL.git  attach to github project"
    echo "  -p          do NOT create Geany project file"
    echo "  -l          use LIB_NAME as project name instead of APP_NAME"
}

error() {
    echo 'Try `hnew -h'"'"' for more information.' >&2
}

no_dup() {
    if [ -n "$1" ]; then
        echo "Duplicated option: -$2" >&2
        error
        exit 1
    fi
}

github_url=''
descr=''
create_project="yes"
library="no"

while getopts ":hg:d:pl" opt; do
    case $opt in
    h)
        help
        exit 0
        ;;
    p)
        create_project="no"
        shift
        ;;
    l)
        library="yes"
        shift
        ;;
    g)
        no_dup "$github_url" g || exit 1
        github_url_full="$OPTARG"
        if [ -z "$github_url_full" ]; then
            echo "Empty URL" >&2
            error
            exit 1
        fi
        github_url="$(echo "$github_url_full" | awk '{
            if(match($0, "^https://github\\.com/([^/]+/[^/]+).git$", s))
                print s[1]
            else
                print ""
        }')"
        if [ -z "$github_url" ]; then
            echo "Invalid URL" >&2
            error
            exit 1
        fi
        shift
        shift
        ;;
    d)
        no_dup "$descr" d || exit 1
        descr="$OPTARG"
        shift
        shift
        ;;
    \?)
        echo "Invalid option: -$OPTARG" >&2
        error
        exit 1
        ;;
    esac
done
if [ ".$1" = ".--" ]; then
    shift
fi

lib_name="$1"
app_name="$2"

if [ -z "$lib_name" ]; then
    echo "Empty library name" >&2
    error
    exit 1
fi

if [ -z "$app_name" ]; then
    echo "Empty application name" >&2
    error
    exit 1
fi

if [ ".$library" = ".yes" ]; then
    project_name="$lib_name"
else
    project_name="$app_name"
fi

if [ -e "$project_name" ]; then
    echo "Directory exists: $project_name" >&2
    exit 1
fi

if [ -n "$github_url" ]; then
    echo "GitHub repository: https://github.com/${github_url}.git"
else
    echo "GitHub repository: <none>"
fi
echo "Project name: $project_name"
echo "Library name: $lib_name"
echo "Application name: $app_name"
echo "Decsription: $descr"
echo ""
while true; do
    read -p "Continue? " yn
    case $yn in
        [Yy]*) break;;
        [Nn]*) exit;;
        *) echo "Please answer yes or no.";;
    esac
done

if [ -n "$github_url" ]; then
    gitdir=$(mktemp -d hnew.XXXXXX)
    git clone "https://github.com/${github_url}.git" $gitdir || { rm -rf $gitdir ; exit 1 ; }
fi

tempdir=$(mktemp -d hnew.XXXXXX)
cd $tempdir

stack new "$lib_name" \
    -p "author-email:xxx" -p "author-name:xxx" -p "category:xxx" -p "copyright:xxx" -p "github-username:xxx" \
    || { cd .. ; rm -rf $gitdir ; rm -rf $tempdir ; exit 1 ; }
cd ..
mv "$tempdir/$lib_name" "$project_name" || { rm -rf $gitdir ; rm -rf $tempdir ; exit 2 ; }
rmdir $tempdir || { rm -rf $gitdir ; rm -rf $tempdir ; exit 2 ; }

if [ -n "$github_url" ]; then
    mv $gitdir/.git "$project_name" || { rm -rf $gitdir ; exit 2 ; }
    rm -rf $gitdir
fi

cd "$project_name"
cat > .gitignore << "EOF"
*~
*.cabal
*.test
*.lkshs
*.geany
dist
cabal-dev
*.o
*.hi
*.chi
*.chs.h
*.dyn_o
*.dyn_hi
.hpc
.hsenv
.cabal-sandbox/
cabal.sandbox.config
*.prof
*.aux
*.hp
.stack-work/
EOF

if [ -z "$github_url" ]; then
    git init || exit 2
fi
git add . || exit 2
git submodule add https://github.com/A1-Triard/haskell_include.git include || exit 2

cp -f include/LICENSE . || exit 2
git add LICENSE || exit 2

rm -f README.md
rm -f ChangeLog.md

echo "name: $lib_name" > package.yaml
echo "version: 0.1" >> package.yaml
if [ -n "$descr" ]; then
    echo "synopsis: $descr" >> package.yaml
    echo "description: $descr" >> package.yaml
else
    echo "#synopsis:" >> package.yaml
    echo "#description:" >> package.yaml
fi
if [ -n "$github_url" ]; then
    echo "github: \"$github_url\"" >> package.yaml
else
    echo "github: \"$author_git/$project_name\"" >> package.yaml
fi
echo "license: Apache" >> package.yaml
echo "author: \"$author_name <$author_email>\"" >> package.yaml
echo "maintainer: \"$author_name <$author_email>\"" >> package.yaml
echo "copyright: \"$(date +%Y) $author_name <$author_email>\"" >> package.yaml
echo "category: CLI"
cat >> package.yaml << "EOF"
#extra-source-files:

dependencies:
- base >= 4.7 && < 5

default-extensions:
- BangPatterns
- CPP
- DataKinds
- DefaultSignatures
- DeriveDataTypeable
- DeriveGeneric
- DeriveFoldable
- DeriveFunctor
- DeriveTraversable
- EmptyCase
- EmptyDataDecls
- ExistentialQuantification
- ExplicitForAll
- FlexibleContexts
- FlexibleInstances
- GADTs
- GeneralizedNewtypeDeriving
- KindSignatures
- LambdaCase
- LiberalTypeSynonyms
- MagicHash
- MonadComprehensions
- MultiParamTypeClasses
- MultiWayIf
- NegativeLiterals
- OverloadedStrings
- ParallelListComp
- PatternSynonyms
- RankNTypes
- ScopedTypeVariables
- StandaloneDeriving
- TemplateHaskell
- TransformListComp
- TupleSections
- TypeFamilies
- TypeOperators
- UnboxedTuples
- UndecidableInstances
- UnicodeSyntax
- ViewPatterns

ghc-options:
- -fmax-pmcheck-iterations=100000000
- -O2
- -Wall
- -Werror
- -fno-warn-unused-imports
- -fprint-potential-instances
- -fsimpl-tick-factor=110

include-dirs:
- include

library:
  source-dirs: src

executables:
EOF

echo "  $app_name:" >> package.yaml
cat >> package.yaml << "EOF"
    main: Main.hs
    source-dirs: app
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
EOF

echo "    - $lib_name" >> package.yaml
echo "" >> package.yaml
echo "tests:" >> package.yaml
echo "  $project_name-test:" >> package.yaml
cat >> package.yaml << "EOF"
    main: Spec.hs
    source-dirs: test
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - HUnit
EOF

echo "    - $lib_name" >> package.yaml

git add . || exit 2
git commit -m "Empty project" || exit 2

if [ ".$create_project" = ".yes" ]; then
    cat > "$project_name.geany" << "EOF"
[editor]
line_wrapping=false

[file_prefs]
final_new_line=true
ensure_convert_new_lines=true
strip_trailing_spaces=true
replace_tabs=true

[indentation]
indent_width=2
indent_type=0
indent_hard_tab_width=8
detect_indent=true
detect_indent_width=true
indent_mode=2

[project]
base_path=.
EOF
    echo "name=$project_name" >> "$project_name.geany"
fi
